/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gamification.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import gamification.model.Badge;
import gamification.model.BadgeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Badge service. Represents a row in the &quot;GM_Badge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link gamification.model.BadgeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BadgeImpl}.
 * </p>
 *
 * @author Sebastien Le Marchand
 * @see BadgeImpl
 * @see gamification.model.Badge
 * @see gamification.model.BadgeModel
 * @generated
 */
public class BadgeModelImpl extends BaseModelImpl<Badge> implements BadgeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a badge model instance should use the {@link gamification.model.Badge} interface instead.
	 */
	public static final String TABLE_NAME = "GM_Badge";
	public static final Object[][] TABLE_COLUMNS = {
			{ "badgeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "badgeName", Types.VARCHAR },
			{ "badgeLevel", Types.INTEGER },
			{ "data_", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table GM_Badge (badgeId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,badgeName VARCHAR(75) null,badgeLevel INTEGER,data_ TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table GM_Badge";
	public static final String ORDER_BY_JPQL = " ORDER BY badge.userId ASC, badge.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GM_Badge.userId ASC, GM_Badge.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.gamification.model.Badge"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.gamification.model.Badge"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.gamification.model.Badge"),
			true);
	public static long BADGENAME_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.gamification.model.Badge"));

	public BadgeModelImpl() {
	}

	public long getPrimaryKey() {
		return _badgeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBadgeId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_badgeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Badge.class;
	}

	public String getModelClassName() {
		return Badge.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("badgeId", getBadgeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("badgeName", getBadgeName());
		attributes.put("badgeLevel", getBadgeLevel());
		attributes.put("data", getData());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long badgeId = (Long)attributes.get("badgeId");

		if (badgeId != null) {
			setBadgeId(badgeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String badgeName = (String)attributes.get("badgeName");

		if (badgeName != null) {
			setBadgeName(badgeName);
		}

		Integer badgeLevel = (Integer)attributes.get("badgeLevel");

		if (badgeLevel != null) {
			setBadgeLevel(badgeLevel);
		}

		String data = (String)attributes.get("data");

		if (data != null) {
			setData(data);
		}
	}

	public long getBadgeId() {
		return _badgeId;
	}

	public void setBadgeId(long badgeId) {
		_badgeId = badgeId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask = -1L;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getBadgeName() {
		if (_badgeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _badgeName;
		}
	}

	public void setBadgeName(String badgeName) {
		_columnBitmask |= BADGENAME_COLUMN_BITMASK;

		if (_originalBadgeName == null) {
			_originalBadgeName = _badgeName;
		}

		_badgeName = badgeName;
	}

	public String getOriginalBadgeName() {
		return GetterUtil.getString(_originalBadgeName);
	}

	public int getBadgeLevel() {
		return _badgeLevel;
	}

	public void setBadgeLevel(int badgeLevel) {
		_badgeLevel = badgeLevel;
	}

	public String getData() {
		if (_data == null) {
			return StringPool.BLANK;
		}
		else {
			return _data;
		}
	}

	public void setData(String data) {
		_data = data;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Badge.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Badge toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Badge)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		BadgeImpl badgeImpl = new BadgeImpl();

		badgeImpl.setBadgeId(getBadgeId());
		badgeImpl.setCompanyId(getCompanyId());
		badgeImpl.setUserId(getUserId());
		badgeImpl.setCreateDate(getCreateDate());
		badgeImpl.setModifiedDate(getModifiedDate());
		badgeImpl.setBadgeName(getBadgeName());
		badgeImpl.setBadgeLevel(getBadgeLevel());
		badgeImpl.setData(getData());

		badgeImpl.resetOriginalValues();

		return badgeImpl;
	}

	public int compareTo(Badge badge) {
		int value = 0;

		if (getUserId() < badge.getUserId()) {
			value = -1;
		}
		else if (getUserId() > badge.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getCreateDate(), badge.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Badge badge = null;

		try {
			badge = (Badge)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = badge.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BadgeModelImpl badgeModelImpl = this;

		badgeModelImpl._originalUserId = badgeModelImpl._userId;

		badgeModelImpl._setOriginalUserId = false;

		badgeModelImpl._originalBadgeName = badgeModelImpl._badgeName;

		badgeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Badge> toCacheModel() {
		BadgeCacheModel badgeCacheModel = new BadgeCacheModel();

		badgeCacheModel.badgeId = getBadgeId();

		badgeCacheModel.companyId = getCompanyId();

		badgeCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			badgeCacheModel.createDate = createDate.getTime();
		}
		else {
			badgeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			badgeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			badgeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		badgeCacheModel.badgeName = getBadgeName();

		String badgeName = badgeCacheModel.badgeName;

		if ((badgeName != null) && (badgeName.length() == 0)) {
			badgeCacheModel.badgeName = null;
		}

		badgeCacheModel.badgeLevel = getBadgeLevel();

		badgeCacheModel.data = getData();

		String data = badgeCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			badgeCacheModel.data = null;
		}

		return badgeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{badgeId=");
		sb.append(getBadgeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", badgeName=");
		sb.append(getBadgeName());
		sb.append(", badgeLevel=");
		sb.append(getBadgeLevel());
		sb.append(", data=");
		sb.append(getData());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("gamification.model.Badge");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>badgeId</column-name><column-value><![CDATA[");
		sb.append(getBadgeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>badgeName</column-name><column-value><![CDATA[");
		sb.append(getBadgeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>badgeLevel</column-name><column-value><![CDATA[");
		sb.append(getBadgeLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Badge.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Badge.class
		};
	private long _badgeId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _badgeName;
	private String _originalBadgeName;
	private int _badgeLevel;
	private String _data;
	private long _columnBitmask;
	private Badge _escapedModelProxy;
}