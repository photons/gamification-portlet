/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gamification.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import gamification.model.BadgeInstance;

import gamification.service.BadgeInstanceLocalService;

import gamification.service.persistence.BadgeInstancePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the badge instance local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link gamification.service.impl.BadgeInstanceLocalServiceImpl}.
 * </p>
 *
 * @author Sebastien Le Marchand
 * @see gamification.service.impl.BadgeInstanceLocalServiceImpl
 * @see gamification.service.BadgeInstanceLocalServiceUtil
 * @generated
 */
public abstract class BadgeInstanceLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements BadgeInstanceLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link gamification.service.BadgeInstanceLocalServiceUtil} to access the badge instance local service.
	 */

	/**
	 * Adds the badge instance to the database. Also notifies the appropriate model listeners.
	 *
	 * @param badgeInstance the badge instance
	 * @return the badge instance that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BadgeInstance addBadgeInstance(BadgeInstance badgeInstance)
		throws SystemException {
		badgeInstance.setNew(true);

		return badgeInstancePersistence.update(badgeInstance);
	}

	/**
	 * Creates a new badge instance with the primary key. Does not add the badge instance to the database.
	 *
	 * @param badgeInstanceId the primary key for the new badge instance
	 * @return the new badge instance
	 */
	@Override
	public BadgeInstance createBadgeInstance(long badgeInstanceId) {
		return badgeInstancePersistence.create(badgeInstanceId);
	}

	/**
	 * Deletes the badge instance with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param badgeInstanceId the primary key of the badge instance
	 * @return the badge instance that was removed
	 * @throws PortalException if a badge instance with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BadgeInstance deleteBadgeInstance(long badgeInstanceId)
		throws PortalException, SystemException {
		return badgeInstancePersistence.remove(badgeInstanceId);
	}

	/**
	 * Deletes the badge instance from the database. Also notifies the appropriate model listeners.
	 *
	 * @param badgeInstance the badge instance
	 * @return the badge instance that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BadgeInstance deleteBadgeInstance(BadgeInstance badgeInstance)
		throws SystemException {
		return badgeInstancePersistence.remove(badgeInstance);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(BadgeInstance.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return badgeInstancePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link gamification.model.impl.BadgeInstanceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return badgeInstancePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link gamification.model.impl.BadgeInstanceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return badgeInstancePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return badgeInstancePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return badgeInstancePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public BadgeInstance fetchBadgeInstance(long badgeInstanceId)
		throws SystemException {
		return badgeInstancePersistence.fetchByPrimaryKey(badgeInstanceId);
	}

	/**
	 * Returns the badge instance with the primary key.
	 *
	 * @param badgeInstanceId the primary key of the badge instance
	 * @return the badge instance
	 * @throws PortalException if a badge instance with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public BadgeInstance getBadgeInstance(long badgeInstanceId)
		throws PortalException, SystemException {
		return badgeInstancePersistence.findByPrimaryKey(badgeInstanceId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return badgeInstancePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the badge instances.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link gamification.model.impl.BadgeInstanceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of badge instances
	 * @param end the upper bound of the range of badge instances (not inclusive)
	 * @return the range of badge instances
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<BadgeInstance> getBadgeInstances(int start, int end)
		throws SystemException {
		return badgeInstancePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of badge instances.
	 *
	 * @return the number of badge instances
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getBadgeInstancesCount() throws SystemException {
		return badgeInstancePersistence.countAll();
	}

	/**
	 * Updates the badge instance in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param badgeInstance the badge instance
	 * @return the badge instance that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BadgeInstance updateBadgeInstance(BadgeInstance badgeInstance)
		throws SystemException {
		return badgeInstancePersistence.update(badgeInstance);
	}

	/**
	 * Returns the badge instance local service.
	 *
	 * @return the badge instance local service
	 */
	public gamification.service.BadgeInstanceLocalService getBadgeInstanceLocalService() {
		return badgeInstanceLocalService;
	}

	/**
	 * Sets the badge instance local service.
	 *
	 * @param badgeInstanceLocalService the badge instance local service
	 */
	public void setBadgeInstanceLocalService(
		gamification.service.BadgeInstanceLocalService badgeInstanceLocalService) {
		this.badgeInstanceLocalService = badgeInstanceLocalService;
	}

	/**
	 * Returns the badge instance remote service.
	 *
	 * @return the badge instance remote service
	 */
	public gamification.service.BadgeInstanceService getBadgeInstanceService() {
		return badgeInstanceService;
	}

	/**
	 * Sets the badge instance remote service.
	 *
	 * @param badgeInstanceService the badge instance remote service
	 */
	public void setBadgeInstanceService(
		gamification.service.BadgeInstanceService badgeInstanceService) {
		this.badgeInstanceService = badgeInstanceService;
	}

	/**
	 * Returns the badge instance persistence.
	 *
	 * @return the badge instance persistence
	 */
	public BadgeInstancePersistence getBadgeInstancePersistence() {
		return badgeInstancePersistence;
	}

	/**
	 * Sets the badge instance persistence.
	 *
	 * @param badgeInstancePersistence the badge instance persistence
	 */
	public void setBadgeInstancePersistence(
		BadgeInstancePersistence badgeInstancePersistence) {
		this.badgeInstancePersistence = badgeInstancePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("gamification.model.BadgeInstance",
			badgeInstanceLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"gamification.model.BadgeInstance");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return BadgeInstance.class;
	}

	protected String getModelClassName() {
		return BadgeInstance.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = badgeInstancePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = gamification.service.BadgeInstanceLocalService.class)
	protected gamification.service.BadgeInstanceLocalService badgeInstanceLocalService;
	@BeanReference(type = gamification.service.BadgeInstanceService.class)
	protected gamification.service.BadgeInstanceService badgeInstanceService;
	@BeanReference(type = BadgeInstancePersistence.class)
	protected BadgeInstancePersistence badgeInstancePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BadgeInstanceLocalServiceClpInvoker _clpInvoker = new BadgeInstanceLocalServiceClpInvoker();
}